name: Insurance Data AI - CI/CD Pipeline

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  # Stage 1: Code Quality & Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint isort mypy bandit safety

      - name: Run Black (Code Formatting)
        run: black --check src/ tests/

      - name: Run Flake8 (Linting)
        run: flake8 src/ tests/ --count --statistics

      - name: Run isort (Import Sorting)
        run: isort --check-only src/ tests/

      - name: Run Pylint (Code Analysis)
        run: pylint src/ --fail-under=8.0 --disable=C0111,R0903 || true

      - name: Run MyPy (Type Checking)
        run: mypy src/ --ignore-missing-imports || true

      - name: Run Bandit (Security Scan)
        run: bandit -r src/ -c .bandit

      - name: Run Safety (Dependency Check)
        run: safety check --json || true

  # Stage 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi

      - name: Run Unit Tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term --junitxml=junit/test-results.xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-insurance

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: junit/test-results.xml

  # Stage 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi

      - name: Run Integration Tests
        run: |
          pytest tests/integration/ -v --junitxml=junit/integration-results.xml

  # Stage 4: Data Quality Tests
  data-quality-tests:
    name: Data Quality Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi

      - name: Run Data Quality Tests
        run: |
          pytest tests/data_quality/ -v --junitxml=junit/dq-results.xml

  # Stage 5: Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Stage 6: Build Documentation
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Markdown
        run: |
          npm install -g markdownlint-cli
          markdownlint '**/*.md' --ignore node_modules --ignore .databricks || true

      - name: Check Documentation Links
        run: |
          npm install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.databricks/*" -exec markdown-link-check {} \; || true

  # Stage 7: Databricks Bundle Validation
  databricks-validation:
    name: Databricks Bundle Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Validate Databricks Bundle
        run: |
          databricks bundle validate || true
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

  # Stage 8: Deploy to Dev (on main branch only)
  deploy-dev:
    name: Deploy to Dev Environment
    runs-on: ubuntu-latest
    needs: [integration-tests, data-quality-tests, security-scan, databricks-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Deploy to Dev
        run: |
          databricks bundle deploy -t dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

      - name: Run Post-Deployment Tests
        run: |
          echo "Running smoke tests in dev environment..."
          # Add smoke test commands here

  # Notification on Failure
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, data-quality-tests, security-scan]
    if: failure()
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Insurance Data AI Pipeline Failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

# Summary Job
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, data-quality-tests, security-scan, build-docs, databricks-validation]
    if: always()
    steps:
      - name: Pipeline Status
        run: |
          echo "âœ… CI/CD Pipeline Completed"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Data Quality: ${{ needs.data-quality-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Documentation: ${{ needs.build-docs.result }}"
          echo "Databricks Validation: ${{ needs.databricks-validation.result }}"

